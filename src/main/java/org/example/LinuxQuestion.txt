Que 1 - > How do you find all `.log` files in the `/var/log` directory that were modified more than
15 days ago, but exclude those files that are larger than 500MB?

Ans :-  find /var/log -type f -name "*.log" -mtime +15 -size -500M

 find /var/log: Search in the /var/log directory.
-type f: Look only for files.
-name "*.log": Find files with the .log extension.
-mtime +15: Select files modified more than 15 days ago.
-size -500M: Exclude files larger than 500MB (only include files smaller than 500MB).



Q2: How can you search for all symbolic links in a directory and delete them using a single
`find` command?

find /path/to/directory -type l -exec rm -f {} +


find /path/to/directory: Search within the specified directory (replace /path/to/directory with your target directory).
-type l: Look specifically for symbolic links.
-exec rm -f {} +: For each symbolic link found, run the rm -f command to forcefully delete it. The {} is replaced by the file path, and the + ensures multiple files are handled efficiently in batches.


Q3: Using find, how do you locate files in the /home/user directory that are owned by a
user other than the current owner?

Cmd -> find /home/user -type f ! -user $(whoami)

find /home/user: Search within the /home/user directory.
-type f: Limit the search to files (not directories, links, etc.).
! -user $(whoami): Find files not owned by the current user.
$(whoami) dynamically gets the username of the currently logged-in user.

If you want to look for files not owned by a specific user (e.g., user1), you can modify the
Cmd -> find /home/user -type f ! -user user1


Que 4 -> How can you find all files in the /etc directory that contain the word "config" in their
         name and have write permission for others?

Cmd -> find /etc -type f -name "*config*" -perm /o=w


Q5: How can you search for all lines in a file `/etc/passwd` that do not contain the word
"bash"?
 Cmd -> grep -v "bash" /etc/passwd
  Explanation:
grep: Command to search for patterns in a file.
-v: Inverts the match, showing lines that do not contain the specified word.
"bash": The word you want to exclude from the results.
/etc/passwd: The file to search

Q6: How do you search recursively through all files in a directory for a specific string, showing
only the matching filenames and excluding binary files?

CMd - > grep -rl --exclude-binary-files "your-string" /path/to/directory


Q7: How can you search for the word "error" in a file, displaying the surrounding 3 lines
before and after each match?
   grep -C 3 "error" /path/to/file


Q8: Using `grep`, how would you find all occurrences of the word "root" in `/etc/passwd` that
start at the beginning of a line?
Cmd :- grep "^root" /etc/passwd


Q9: How can you create a compressed archive of the `/home/user` directory, excluding all
`.mp4` files?

Cmd -> tar --exclude='*.mp4' -czf user_home_archive.tar.gz /home/user

tar: Command to create or extract archives.
--exclude='*.mp4': Excludes all files with the .mp4 extension.
-c: Create a new archive.
-z: Compress the archive using gzip.
-f user_home_archive.tar.gz: Specify the output archive file name.
/home/user: The directory to archive.



Q10: How would you extract only a specific file `file.txt` from a `.tar.gz` archive without
extracting the entire archive?

Cmd -> tar -xzf archive.tar.gz file.txt
tar: Command to work with .tar archives.
-x: Extract files.
-z: Use gzip to decompress the .gz file.
-f archive.tar.gz: Specify the archive to extract from.
file.txt: The specific file you want to extract.

Q11: How can you append a file called `newfile.txt` to an existing `archive.tar.gz` without
decompressing the archive?

Step 1 Rename the existing archive to .tar (if itâ€™s already a .tar.gz):
    mv archive.tar.gz archive.tar

Step 2 Append the new file to the .tar archive:
    tar -rf archive.tar newfile.txt

 Step 3 Recompress the .tar archive back into .tar.gz:
   gzip archive.tar



Q12: How would you list the contents of a `.tar.gz` archive without extracting it?

tar -tzf archive.tar.gz

tar: Command to work with archive files.
-t: List the contents of the archive.
-z: Decompress using gzip (for .gz files).
-f archive.tar.gz: Specify the archive file you want to list.

Q13: How can you list all currently running processes and then filter for processes that
include the word "java", showing only the process ID and name?

ps aux | grep "java" | awk '{print $2, $11}'

ps aux: Lists all running processes with detailed information.
a: Shows processes for all users.
u: Displays the user/owner of the processes.
x: Includes processes not attached to a terminal.


Q14: How can you display a list of all files in `/var/log`, then filter for files containing the word
"error" using both `ls` and `grep` in a pipeline?

ls /var/log | grep "error"


Q15: How do you count the number of lines in a file that contain the word "failed" using
`grep` and `wc`?

grep -c "failed" /path/to/file
grep "failed" /path/to/file | wc -l



Q16: How can you display the last 20 lines of a log file and filter the lines that contain the
word "critical" using a combination of `tail` and `grep`?

tail -n 20 /path/to/logfile | grep "critical"


Q17: How do you display the disk usage of all files and directories in `/home/user` in humanreadable format, sorted by size in descending order?

du -h /home/user/* | sort -hr

du -h /home/user/*:
du: Disk usage command.
-h: Displays sizes in a human-readable format (e.g., KB, MB, GB).
/home/user/*: Specifies that you want to check all files and directories in /home/user.


Q18: How can you display the total disk usage of the `/var` directory but exclude the
subdirectory `/var/log`?
du -sh --exclude=/var/log /var

du: Disk usage command.
-s: Summarizes the total size (shows only the total for the specified directory).
-h: Displays sizes in a human-readable format (e.g., KB, MB, GB).
--exclude=/var/log: Excludes the /var/log directory from the calculation.
/var: Specifies the directory for which you want to check disk usage.

Q19: How can you use `du` to find the disk usage of files larger than 100MB in a directory?
find /path/to/directory -type f -size +100M -exec du -h {} +

find /path/to/directory: Searches in the specified directory.
-type f: Only looks for files (not directories).
-size +100M: Finds files larger than 100MB. The + sign indicates "greater than."
-exec du -h {} +: Executes the du command on the found files.
du -h: Displays the disk usage in human-readable format (e.g., KB, MB, GB).
{}: Represents each file found by find.
+: Efficiently groups multiple files to minimize the number of times du is called.


Q20: How do you display the disk usage of the 10 largest directories in the `/usr` directory
using `du`?


du -sh /usr/* | sort -hr | head -n 10


du -sh /usr/*:

du: Disk usage command.
-s: Summarizes the total size of each argument (shows only the total for each directory).
-h: Displays sizes in a human-readable format (e.g., KB, MB, GB).
/usr/*: Specifies that you want to check all directories and files directly under /usr.
|: The pipe operator sends the output of the du command to the next command.

sort -hr:

sort: Command to sort lines of text files.
-h: Sorts human-readable numbers (understanding KB, MB, etc.).
-r: Sorts in reverse order (largest to smallest).
head -n 10: Displays the first 10 lines of the sorted output, which will be the 10 largest directories.
